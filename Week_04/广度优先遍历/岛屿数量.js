/**
 * @param {character[][]} grid
 * @return {number}
 * https://leetcode-cn.com/problems/number-of-islands/
 */
var numIslands = function(grid) {
  let nums = 0;
  let neighbourPositionOffSets = [[0,1],[1,0],[0,-1],[-1,0]];
  const isInBound = (position)=>{
      if(position[0] > -1 && position[0] < grid.length && position[1] > -1 && position[1] < grid[0].length)return true;
      return false;
  }
  // 遍历岛屿中的每个网格，针对网格为1的进行一次bfs，直到bfs结束的时候则岛屿数量+1
  // 遍历的过程中，如果经过了bfs的，标志为0，
  for(let r = 0;r<grid.length;r++){
      for(let c = 0;c < grid[0].length;c++){
          let current = grid[r][c];
          // 是水的话不用进行bfs
          if(current === '0')continue;
          // 不是0 岛屿数量+1
          nums++;
          let queue = [[r,c]];
          while(queue.length){
              let localLength = queue.length;
              // 进行一次出栈，把相邻的岛屿数量都标志为0
              for(let i = 0;i<localLength;i++){
                  let position = queue.shift();
                  grid[position[0]][position[1]] = '0';
                  for(let i = 0;i<neighbourPositionOffSets.length;i++){
                      let neighbourOffSetsItem = neighbourPositionOffSets[i];
                      let nextPositionX = position[0] + neighbourOffSetsItem[0];
                      let nextPositionY = position[1] + neighbourOffSetsItem[1];
                      if(isInBound([nextPositionX,nextPositionY]) && grid[nextPositionX][nextPositionY] === '1'){
                          // 加进去之前要标志一下 否则它相邻的也可能把它加上 
                          grid[nextPositionX][nextPositionY] = '0';
                          queue.push([nextPositionX,nextPositionY])
                      } 
                  }
              }
          }
      }
  }
  return nums;
};

// let result = numIslands([
//   ['1','1','1','1','0'],
//   ['1','1','0','1','0'],
//   ['1','1','0','0','0'],
//   ['0','0','0','0','0']
//   ]);

  // let result = numIslands(
  // [
  //   ['1','1','0','0','0'],
  //   ['1','1','0','0','0'],
  //   ['0','0','1','0','0'],
  //   ['0','0','0','1','1']
  // ]
  // );

  // let result = numIslands([]);

  let param = [["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]

  let result = numIslands(param);
  console.log('result',result);